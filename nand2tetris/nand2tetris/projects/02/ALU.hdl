// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
        Not16(in=x, out=outnot16x);
        Add16(a=x, b=outnot16x, out=outadd16x);
        Not16(in=outadd16x, out=xzerado);
        Mux16(a=x, b=xzerado, sel=zx, out=w1);

        Not16(in=w1, out=xnegado);
        Mux16(a=w1, b=xnegado, sel=nx, out=xfinal);

        Not16(in=y, out=outnot16y);
        Add16(a=y, b=outnot16y, out=outadd16y);
        Not16(in=outadd16y, out=yzerado);
        Mux16(a=y, b=yzerado, sel=zy, out=w2);

        Not16(in=w2, out=ynegado);
        Mux16(a=w2, b=ynegado, sel=ny, out=yfinal);

        And16(a=xfinal, b=yfinal, out=outxEy);
        Add16(a=xfinal, b=yfinal, out=outxmaisy);
        Mux16(a=outxEy, b=outxmaisy, sel=f, out=outf);

        Not16(in=outf, out=notoutf);
        Mux16(a=outf, b=notoutf, sel=no, out[15]=outng, out[0..7]=outzr1, out[8..15]=outzr2, out=out);

        Mux(a=false, b=true, sel=outng, out=ng);

        Or8Way(in=outzr1, out=x1);
        Or8Way(in=outzr2, out=x2);
        Or(a=x1, b=x2, out=notzr);
        Not(in=notzr, out=zr);
}